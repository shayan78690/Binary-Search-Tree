/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
public class BSTIterator {
    private Stack<TreeNode> stack = new Stack<>();
    boolean reverse = true;

    public BSTIterator(TreeNode root, boolean isReverse) {
        this.reverse = isReverse;
        pushAll(root);
    }

    public boolean hasNext() {
        return !stack.isEmpty();
    }

    public int next() {
        TreeNode node = stack.pop();
        if(!reverse) {
            pushAll(node.right);
        } else {
            pushAll(node.left);
        }
        return node.val;
    }

    public void pushAll(TreeNode node) {
        while(node != null) {
            stack.push(node);
            if(reverse) {
                node  = node.right;
            } else {
                node = node.left;
            }
        }
    }
}

class Solution {
    public boolean findTarget(TreeNode root, int k) {
        BSTIterator l = new BSTIterator(root, false);
        BSTIterator r = new BSTIterator(root, true);

        int left = l.next();
        int right = r.next(); // before

        while(left < right) {
            if(left + right == k) {
                return true;
            } else if(left + right < k) {
                left = l.next();
            } else {
                right = r.next();
            }
        }
        return false;
    }
}
